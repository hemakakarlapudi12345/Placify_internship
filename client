import socket

class KVClient:
    def _init_(self, host='127.0.0.1', port=12345):
        self.host = host
        self.port = port

    def send_command(self, command):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((self.host, self.port))
            s.sendall(command.encode('utf-8') + b'\n')
            response = s.recv(1024).decode('utf-8').strip()
        return response

    def get(self, key):
        return self.send_command(f'GET {key}')

    def set(self, key, value):
        return self.send_command(f'SET {key} {value}')

    def delete(self, key):
        return self.send_command(f'DELETE {key}')

    def flush(self):
        return self.send_command('FLUSH')

    def mget(self, *keys):
        return self.send_command(f'MGET {" ".join(keys)}')

    def mset(self, *key_value_pairs):
        return self.send_command(f'MSET {" ".join(key_value_pairs)}')

def main():
    client = KVClient()

    print("Simple Key-Value Store Client")
    print("Commands: GET key, SET key value, DELETE key, FLUSH, MGET key1 key2 ..., MSET key1 value1 key2 value2 ...")
    print("Type 'exit' to quit")

    while True:
        user_input = input("Enter command: ").strip()
        if user_input.lower() == 'exit':
            print("Exiting...")
            break
        if not user_input:
            continue

        try:
            command, *params = user_input.split()
        except ValueError:
            print("Invalid command. Please try again.")
            continue

        command = command.upper()

        if command == 'GET':
            if len(params) != 1:
                print("ERROR: GET requires exactly one argument")
            else:
                print(client.get(params[0]))

        elif command == 'SET':
            if len(params) != 2:
                print("ERROR: SET requires exactly two arguments")
            else:
                print(client.set(params[0], params[1]))

        elif command == 'DELETE':
            if len(params) != 1:
                print("ERROR: DELETE requires exactly one argument")
            else:
                print(client.delete(params[0]))

        elif command == 'FLUSH':
            if params:
                print("ERROR: FLUSH does not take any arguments")
            else:
                print(client.flush())

        elif command == 'MGET':
            if not params:
                print("ERROR: MGET requires at least one argument")
            else:
                print(client.mget(*params))

        elif command == 'MSET':
            if len(params) % 2 != 0:
                print("ERROR: MSET requires an even number of arguments")
            else:
                print(client.mset(*params))

        else:
            print("ERROR: Unknown command")

if _name_ == '_main_':
    main()
